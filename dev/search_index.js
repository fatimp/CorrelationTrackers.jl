var documenterSearchIndex = {"docs":
[{"location":"index.html#CorrelationTrackers.jl","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"","category":"section"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"CorrelationTrackers.jl package has means to do fast updates of correlation functions calculated by CorrelationFunctions.Directional module in CorrelationFunctions.jl. Correlation functions are recalculated when you change an element of the underlying array. Currently supported functions are:","category":"page"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"Two-point function S_2(r)\nLineal-path function L_2(r)\nSurface-surface function F_ss(r)\nSurface-void function F_sv(r)\nCross-correlation function S_2^p_1p_2(r)","category":"page"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"An update after one element of the underlying system was changed is about 10000 times faster compared to a full recalculation of the correlation functions for that system.","category":"page"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"This package also supports fast rollback to the previous state if the last update must be rejected (via AnnealingRollbackAPI).","category":"page"},{"location":"index.html#Examples","page":"CorrelationTrackers.jl","title":"Examples","text":"","category":"section"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"This is a step-by-step guide on how to use CorrelationTrackers.jl:","category":"page"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"For the beginning, create your system you want to calculate correlation functions for. Let it be two-dimensional two-phase system with size 20x30.\nPick combinations of correlation function + phase which you want to track, e.g S_2^(1)(r), L_2^(1)(r) and L_2^(0)(r). A combination of function and phase is represented by AbstractTracker types, e.g. S2Tracker(1) will track S_2^(1)(r) function.\nCreate CorrelationTracker structure and access it as an ordinary array.\nObtain correlation functions at any time using functions from CorrelationFunctions.Directional. module.","category":"page"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"using StatsBase\nusing PrettyTables\nusing Random\nusing CorrelationFunctions\nusing CorrelationTrackers\n\n# Create our system\nsystem = rand(MersenneTwister(348), 0:1, (20, 30))\n\n# Suppose we want to track two-point function for phase 1 and lineal-path\n# function for phase 0.\ntracking = [S2Tracker(1), L2Tracker(0)]\n\n# Create the tracker. It may require some time if your system is big.\ntracker = CorrelationTracker(system; tracking = tracking)\n\n# Do some phase flipping in both the original system and the tracker\nindices = CartesianIndices(tracker)\nstate = MersenneTwister(123)\nfor n in 1:100\n    idx = rand(state, indices)\n    system[idx]  = 1 - system[idx]\n    tracker[idx] = 1 - tracker[idx]\nend\n\npretty_table(stdout, hcat(Directional.s2(system,  1) |> mean,\n                          Directional.s2(tracker, 1) |> mean,\n                          Directional.l2(system,  0) |> mean,\n                          Directional.l2(tracker, 0) |> mean);\n                     header = [\"S2 recalculated\", \"S2 tracked\",\n                               \"L2 recalculated\", \"L2 tracked\"])","category":"page"},{"location":"index.html#API","page":"CorrelationTrackers.jl","title":"API","text":"","category":"section"},{"location":"index.html#Types-used-to-designate-a-correlation-function","page":"CorrelationTrackers.jl","title":"Types used to designate a correlation function","text":"","category":"section"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"This is a part of AnnealingAPI.jl package since version 0.6.0.","category":"page"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"AbstractTracker\nS2Tracker\nL2Tracker\nSSTracker\nSVTracker","category":"page"},{"location":"index.html#AnnealingAPI.AbstractTracker","page":"CorrelationTrackers.jl","title":"AnnealingAPI.AbstractTracker","text":"Generic type for correlation function tracker.\n\nSee also: L2Tracker, S2Tracker, SSTracker.\n\n\n\n\n\n","category":"type"},{"location":"index.html#AnnealingAPI.S2Tracker","page":"CorrelationTrackers.jl","title":"AnnealingAPI.S2Tracker","text":"S2Tracker(phase)\n\nDescriptor for two-point correlation function for the phase phase.\n\nSee also: L2Tracker, SSTracker, AbstractTracker.\n\n\n\n\n\n","category":"type"},{"location":"index.html#AnnealingAPI.L2Tracker","page":"CorrelationTrackers.jl","title":"AnnealingAPI.L2Tracker","text":"L2Tracker(phase)\n\nDescriptor for line-segment correlation function for the phase phase.\n\nSee also: S2Tracker, SSTracker, AbstractTracker.\n\n\n\n\n\n","category":"type"},{"location":"index.html#AnnealingAPI.SSTracker","page":"CorrelationTrackers.jl","title":"AnnealingAPI.SSTracker","text":"SSTracker(phase)\n\nDescriptor for surface-surface correlation function for the phase phase.\n\nSee also: S2Tracker, L2Tracker, AbstractTracker.\n\n\n\n\n\n","category":"type"},{"location":"index.html#AnnealingAPI.SVTracker","page":"CorrelationTrackers.jl","title":"AnnealingAPI.SVTracker","text":"SVTracker(phase)\n\nDescriptor for surface-void correlation function for the phase phase.\n\nSee also: S2Tracker, L2Tracker, SSTracker, AbstractTracker.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Constructor-and-accessors","page":"CorrelationTrackers.jl","title":"Constructor and accessors","text":"","category":"section"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"CorrelationTracker\ndefault_trackers","category":"page"},{"location":"index.html#CorrelationTrackers.CorrelationTracker","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.CorrelationTracker","text":"CorrelationTracker(system   :: AbstractArray{T, N}; \n                   tracking = default_trackers(T),\n                   periodic = false[, directions][, kwargs...])\n\nCreate correlation functions tracker.\n\nCreate correlation tracker for the array system. tracking is a vector of AbstractTracker types which specify correlation functions you wish to track. periodic and direction have the same meaning as in the most functions in CorrelationFunctions.jl package. Additional arguments such as len may be passed in kwargs.\n\nReturned tracker supports interface of AbstractArray (e.g. you can perform element-wise read and write operations).\n\nExamples\n\njulia> let\n       system = rand(MersenneTwister(35), 0:1, (30, 10))\n       tracker = CorrelationTracker(system)\n       end\n30×10 CorrelationTracker{Int64, 2, Matrix{Int64}}:\n 0  1  0  1  1  0  0  1  1  0\n 1  1  1  0  0  0  0  0  1  1\n 0  0  0  0  0  0  1  1  0  1\n 1  1  1  0  1  1  1  0  1  0\n 0  1  0  0  1  0  0  1  1  1\n 0  0  0  0  0  0  1  0  1  1\n 0  0  1  0  1  1  0  1  0  1\n 1  0  0  1  0  0  1  0  1  0\n 0  1  1  0  0  1  1  1  1  1\n 0  0  1  1  1  1  0  0  0  0\n 0  0  1  1  0  0  1  1  1  0\n 0  1  0  0  0  1  0  0  1  0\n 1  0  0  1  0  0  1  1  0  1\n 0  1  0  1  0  0  1  1  1  0\n 1  1  0  1  1  1  0  1  0  1\n 1  1  1  0  0  0  0  1  0  1\n 1  0  0  1  0  0  1  1  1  0\n 0  0  0  1  0  0  0  1  1  0\n 1  0  1  0  1  0  0  0  1  0\n 1  0  0  1  0  0  0  0  0  1\n 1  1  1  0  1  0  1  0  1  1\n 0  1  0  1  1  0  0  1  0  1\n 0  0  0  1  0  0  1  1  1  1\n 0  0  1  1  1  1  0  1  1  0\n 1  0  1  1  0  0  0  0  0  1\n 1  1  0  1  0  1  1  0  1  0\n 0  1  1  0  0  1  1  0  1  0\n 0  1  0  0  1  0  0  1  0  0\n 1  1  0  0  1  1  0  0  0  1\n 0  0  1  1  0  1  1  1  1  0\n\n\n\n\n\nCorrelationTracker(system, like)\n\nCreate a CorrelationTracker on top of array system with parameters matching those in the tracker like.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CorrelationTrackers.default_trackers","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.default_trackers","text":"default_trackers(T)\n\nConstruct a vector of correlation functions which are tracked by default (that is S_2^1(x), L_2^1(x) and L_2^0(x)). T is the type of x.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"The following functions are reexported from AnnealingAPI.jl since version 0.6.0.","category":"page"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"tracked_data\ntracked_length\ntracked_directions","category":"page"},{"location":"index.html#AnnealingAPI.tracked_data","page":"CorrelationTrackers.jl","title":"AnnealingAPI.tracked_data","text":"tracked_data(x :: AbstractArray)\n\nReturn an iterator over correlation function descriptors which are tracked by the tracker x.\n\n\n\n\n\n","category":"function"},{"location":"index.html#AnnealingAPI.tracked_length","page":"CorrelationTrackers.jl","title":"AnnealingAPI.tracked_length","text":"tracked_length(x :: AbstractArray)\n\nReturn maximal tracked correlation length\n\n\n\n\n\n","category":"function"},{"location":"index.html#AnnealingAPI.tracked_directions","page":"CorrelationTrackers.jl","title":"AnnealingAPI.tracked_directions","text":"tracked_directions(x :: AbstractArray)\n\nReturn directions along which correlation functions are tracked.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Additional-correlation-functions-not-covered-by-AnnealingAPI.jl","page":"CorrelationTrackers.jl","title":"Additional correlation functions not covered by AnnealingAPI.jl","text":"","category":"section"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"CCTracker\ncross_correlation","category":"page"},{"location":"index.html#CorrelationTrackers.CCTracker","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.CCTracker","text":"CCTracker(phase1, phase2)\n\nDescriptor for cross-corelation function for the phases phase1 and phase2.\n\nNB: Cross-correlation function does not commute, i.e. CCTracker(phase1, phase2) and CCTracker(phase2, phase1) track different functions.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CorrelationTrackers.cross_correlation","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.cross_correlation","text":"cross_correlation(tracker :: CorrelationTracker, phase1, phase2)\n\nReturn precalculated values of cross correlation function for phases phase1 and phase2.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Extrapolating-to-other-dimensions-and-directions","page":"CorrelationTrackers.jl","title":"Extrapolating to other dimensions and directions","text":"","category":"section"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"Two or more CorrelationTracker objects can be extrapolated to new dimensions and/or directions. For this purpose, an object of type ExtrapolatedData is created which loses the underlying array but preserves tracked correlation functions of the original CorrelationTracker object plus holds extrapolated data. ExtrapolatedData is read-only, which means you cannot call update_corrfns! on it.","category":"page"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"ExtrapolatedData","category":"page"},{"location":"index.html#CorrelationTrackers.ExtrapolatedData","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.ExtrapolatedData","text":"ExtrapolatedData(tracker, dimensions, directions)\n\nExtrapolate correlation functions to other dimensions and/or directions. Correlation functions are defined for objects of ExtrapolatedData type as they are defined for CorrelationTrackers.\n\nExample\n\njulia> begin\n       a = rand(MersenneTwister(1), 0:1, (20, 20));\n       tracker = CorrelationTracker(a; periodic = true);\n       D.s2(tracker, 0)\n       end\n┌────────┬────────┐\n│      x │      y │\n├────────┼────────┤\n│ 0.4975 │ 0.4975 │\n│  0.225 │ 0.2325 │\n│  0.265 │   0.25 │\n│   0.24 │   0.25 │\n│  0.235 │  0.245 │\n│ 0.2525 │ 0.2275 │\n│ 0.2525 │ 0.2675 │\n│ 0.2425 │ 0.2475 │\n│  0.245 │  0.235 │\n│ 0.2575 │ 0.2475 │\n└────────┴────────┘\n\njulia> begin\n       extra = ExtrapolatedData(tracker, 3, [:x, :y, :z, :xyz])\n       D.s2(extra, 0)\n       end\n┌────────┬────────┬─────────┬──────────┐\n│      x │      y │       z │      xyz │\n├────────┼────────┼─────────┼──────────┤\n│ 0.4975 │ 0.4975 │  0.4975 │   0.4975 │\n│  0.225 │ 0.2325 │ 0.22875 │ 0.249796 │\n│  0.265 │   0.25 │  0.2575 │ 0.242679 │\n│   0.24 │   0.25 │   0.245 │ 0.243923 │\n│  0.235 │  0.245 │    0.24 │ 0.246077 │\n│ 0.2525 │ 0.2275 │    0.24 │ 0.248253 │\n│ 0.2525 │ 0.2675 │    0.26 │ 0.269904 │\n│ 0.2425 │ 0.2475 │   0.245 │ 0.291554 │\n│  0.245 │  0.235 │    0.24 │ 0.313205 │\n│ 0.2575 │ 0.2475 │  0.2525 │ 0.334856 │\n└────────┴────────┴─────────┴──────────┘\n\n\n\n\n\nExtrapolatedData(extrapolated_data1, extrapolated_data2)\n\nReturn ExtrapolatedData object which contains correlation statistics from both extrapolated_data1 and extrapolated_data2. The two input objects must share the same properties such as the shape of underlying data, tracked functions, directions and so on.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Caveats","page":"CorrelationTrackers.jl","title":"Caveats","text":"","category":"section"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"Currently the functions from CorrelationFunctions.jl package return internal structures of supplied tracker. Do not modify returned values. This behavior can be changed to a safer one in the future.","category":"page"},{"location":"index.html","page":"CorrelationTrackers.jl","title":"CorrelationTrackers.jl","text":"Phase argument to SSTracker and SVTracker is currently ignored. It should be OK as long as tracked system is two-phase.","category":"page"}]
}
